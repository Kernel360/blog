---
layout: post  
title: "STOMP(WebSocket)에서 내부 브로커와 외부 브로커의 차이"
author: "김용희"
categories: "기술블로그"
banner:
  image: 
  background: "#000"
  height: "100vh"
  min_height: "38vh"
  heading_style: "font-size: 4.25em; font-weight: bold; text-decoration: underline"
  tags: [fiber]
---

React는 16 버전부터 Fiber라고 불리는 새로운 코어 아키텍처를 채택했습니다. 
기존의 스택 기반 알고리즘을 완전히 새롭게 작성한 것이며 지금까지도 지속적으로 업데이트 및 리팩터링되고 있습니다.


# 도입기
React Fiber는 React core 알고리즘의 구현체
Fiber의 목적은 animation, layout, gesture와 같은 영역들에 있어서 React의 적합성을 확보하기 위함입니다. 
주요 과제는 incremental rendering으로, 렌더링 작업을 chunk 단위로 나눈 뒤 여러 프레임에 수행하는 것을 의미합니다.

# 리뷰
## Reconciliation 이란?
### reconciliation(재조정)
- React에서 어떤 부분들이 변해야할지 서로 다른 두 개의 트리를 비교하는데 사용하는 알고리즘

### update(업데이트)
- React 애플리케이션을 렌더하기 위해 사용되는 데이터의 변화. 주로 setState와 같은 함수 결과로 나타나며 결론적으로 리렌더링(rerendering)의 결과물입니다.

React API의 중심 아이디어는 업데이트로 하여금 전체 애플리케이션의 리렌더링을 유발하는 것입니다. 
이는 개발자로 애플리케이션을 특정 상태로부터 다른 상태로 효율적으로 전이시킬 수 있는 방법에 대한 고민에서 벗어나 선언적으로 추론할 수 있게 해줍니다.

매 변화가 있을 때마다 전체 애플리케이션을 리렌더링하는 것은 정말 작은 앱애서나 가능한 일입니다. 
실제 애플리케이션은 퍼포먼스 상으로 하면 안될정도로 무거운 작업입니다. Rect는 최적화를 통해 리렌더링 속에 전체 앱을 렌더링하면서도 동시에 좋은 성능을 유지할 수 있습니다. 
이런 최적화의 많은 부분들이 reconciliation의 일부입니다.

reconiliation은 "virtual dom" 뒤에서 실행되는 알고리즘입니다. React 애플리케이션을 렌더링하면 노드들이 달린 트리가 생성되고, 메모리에 저장됩니다.
이 트리는 렌더링 환경에 플러시됩니다. 예를 들어 브라우저의 경우 DOM 작업의 형태로 해석됩니다. setState 등을 통해 app이 업데이트된다면, 새로운 트리가 생성됩니다. 
렌더뢴 앱에 있어 변화가 필요한 부분들을 발견하기 위해 새로운 트리는 이전 트리와 비교되어집니다.

키포인트는 다음과 같습니다.
- 다른 컴포넌트 타입은 다른 트리를 생성할 것을 예측하기 때문에, React는 이런 경우, 둘을 비교하지 않고 이전 트리를 완전히 교체합니다.
- 리스트는 key를 이용하여 비교됩니다. 여기서 key는 stable하고 예측 가능하며, unique해야 합니다.



## Reconiliation vs Rendering

DOM은 React가 렌더할 수 있는 환경 중 하나입니다.
다양한 타겟을 타게팅할 수 있는 이유는 Rect가 reconiliation과 rendering은 다른 단계에서 진행하도록 디자인되었기 때문입니다.
reconiler는 트리의 어떤 부분들이 변화해야하는지를 계산하고, renderer는 그 정보를 바탕으로 렌더된 앱을 업데이트합니다.

이 단계들의 분리는 React DOM과 React Native가 다른 렌더러를 사용하지만 React core에서 제공되는 같은 reconiler를 사용할 수 있음을 의미합니다.

Fiber는 이 reconiler의 새로운 버전이라 볼 수 있습니다.


## Scheduling

스케줄링 작업이 언제 수행되어야 하는지를 결정하는 과정
작업은 수행되어야 하는 어떠한 계산의 형태이며, 주로 setState와 같은 업데이트의 결과입니다.


### React의 디자인 원칙
> 현재 도입방식에서 React는 한 번의 Tick 동안 재귀적으로 트리를 탐색하고 업데이트된 트리 전체의 렌더 함수들을 호출한다. 
> 하지만 미래에는 프레임 드롭을 방지하기 위해 몇몇 업데이트들은 지연시킬 수 있다.
> 이것은 React 디자인에 있어 공통되는 주제이다. 몇몇 인기 라이브러리들은 새로운 데이터가 제공되었을 때 연산을 수행하는 “Push” 방식을 도입하였다. 
> 반대로 React는 연산이 필요시까지 지연될 수 있는 “Pull” 방식을 고수한다.
> React는 제네릭(generic)한 데이터 처리 라이브러리가 아니다. React는 유저 인터페이스를 만드는 라이브러리다. 
> 우리가 생각했을 때 React는 어떤 연산이 현재 적합하고, 어떤건 적합하지 않은지를 판별하기 위해 애플리케이션 내부에 굉장히 고유하게 위치한다고 생각한다.
> 어떤 항목이 스크린에서 벗어나면, 우리는 그것과 관련된 로직을 지연시킬 수 있다. 만약 데이터가 프레임 주사율보다 빠르게 도착하면, 업데이트를 합치고 배칭시킬 수 있다. 
> 우리는 프레임 드롭을 방지하기 위해 유저 상호작용에서 오는 작업(버튼 클릭으로 발생하는 애니메이션과 같은)에 덜 중요한 백그라운드 작업(네트워크로부터 방금 막 도착하여 새롭게 렌더링되는 컨텐츠) 
> 보다 높은 우선순위를 줄 수도 있다.

여기서 키포인트는 아래와 같습니다.

- UI에 있어 모든 업데이트가 꼭 즉각적으로 반영해야 하는것이 아니다. (즉각적으로 반영하게 된다면 프레임 드롭과 UX 저하 등의 상황을 불러올 수 있습니다)
- 다른 종류의 업데이트들은 다른 종류의 우선순위를 갖습니다.
    예를 들면 애니메이션 업데이트는 데이터 스토어 업데이트에 비해 빨리 완료되어야 합니다.
- Push 기반 접근은 프로그래머에게 스케줄링이 어떻게 작동할 것인지 결정하도록 요구합니다.
- Pull 기반 접근은 프레임워크가 그 결정사항들을 대신 결정해줍니다.

React core 알고리즘을 정비하여 스케줄링에 있어 강점을 갖도록 하는 것이 Fiber의 주요 쟁점입니다.


## Fiber란?
Fiber의 주요 목표는 React로 하여금 스케줄링에 강점을 갖도록 하는 것이며 구체적으로는 다음과 같은 일을 할 수 있어야 합니다.

- 작업을 멈추고 나중에 다시 돌아오기
- 다른 유형의 일에 우선권 부여하기
- 이전에 완성한 작업을 재사용하기
- 더 이상 필요하지 않은 작업을 중단하기

이들을 수행하기 위해서는, 먼저 단위 별로 세분화해야 하며, 이 과정 자체가 Fiber라고 할 수 있습니다. Fiber는 이처럼 작업의 한 단위(a unit of work)를 나타냅니다.

데이터 함수로서 리액트 컴포넌트라는 개념은 v = f(d) 같이 표현됩니다.

React 앱에서 렌더링은 함수 내부(본문)에서 다른 함수 호출을 포함하고 있다는 것과 유사하다는 점을 보여줍니다. 이러한 유추 방식이 fiber에 대해 생각함에 있어 유용합니다.
일반적으로 컴퓨터가 프로그램의 실행을 추적하는 것은 콜스택을 통해서다. 함수가 실행되면, 새로운 stack frame은 스택 위에 쌓이게 됩니다.

UI를 다룰 때 문제는 너무 많은 작업이 동시에 수행되면 애니메이션 프레임 드롭이 생기고, 전반적으로 끊기는 느낌을 주게 됩니다. 
더 나아가, 최신 업데이트로 대체되는 경우 해당 작업 중 일부가 불필요할 수 있습니다. 이 지점에서 UI 컴포넌트와 함수와 비교가 세분화되는데, 
일반적으로 컴포넌트는 함수보다 더 구체적으로 고려해야할 사항이 많기 때문입니다.

새로운 브라우저들은 동일한 문제를 해결하는 것을 돕기 위한 API들을 가지고 있습니다.
requestIdleCallback은 유후 시간 동안 낮은 우선순위를 갖는 함수들이 스케줄링 될 수 있도록 하고, 
requestAnimationFrame은 다음 애니메이션 프레임에 높은 우선순위를 갖는 함수가 호출될 수 있도록 해줍니다. 
여기서 문제점은 이러한 API들을 사용하기 위해 작업은 점증적인 단위로 나눌 방법이 필요합니다. 
콜스택에만 기대하게 되면 브라우저는 스택이 비워질 때까지 작업을 진행할 것입니다.

UI 렌더링을 최적화하기 위해 콜스택의 작업 방식을 커스터마이징할 수 있으면 좋지 않을까요? 원할 때 콜스택에 인터럽트를 걸 수 있고, 
수동으로 stack frame을 조정할 수 있다면 멋지지 않을까요?
이것이 React Fiber의 목적입니다. Fiber는 특별히 React component를 위한 스택의 재구현입니다. 
단일 fiber는 가상의 스택 프레임(virtual stack frame)이라 볼 수 있습니다.

스택을 재구현하는 것의 장점은 stack frame을 메모리에 저장하고 원할 때 실행할 수 있습니다. 이것은 스케줄링 목표를 달성하기 위해 중요합니다.
스케줄링 이외에도, stack frame을 수동으로 다룰 수 있는 것은 동시성(concurrency)이나 error boundaries와 같은 기능들을 사용할 수 있게 해줍니다.


## Fiber의 구조
Fiber는 컴포넌트에 대한 입력과 출력에 대한 정보들을 가지고 있는 자바스크립트 객체입니다.
하나의 fiber는 스택 프레임에 해당하며, 동시에 Component의 인스턴스에 해당되기도 합니다.
Fiber에 해당하는 중요한 항목들을 리스트업 하면 아래와 같습니다.

### 1) type과 key
Fiber의 type과 key는 React 요소의 type과 key와 같은 목적을 갖습니다.
실제로, React 요소로부터 fiber가 생성될 때, 이 두 필드는 복사되어 전달됩니다)
Fiber의 type은 그것이 상응하는 컴포넌트를 가리킵니다. 합성 컴포넌트(Composite Component)의 type은 함수 또는 클래스 컴포넌트 자체입니다. 
div나 span과 같은 호스트 컴포넌트(Host Component)의 type은 문자열입니다.
개념상으로 type은 호출(execution)이 stack frame에 의해 추적되는 함수(v=f(d))입니다.
type과 함께, key는 fiber가 재사용될 수 있는지를 판별하기 위해 reconiliation 중에 사용됩니다.

### 2) child와 sibling
이 필드들은 다른 fiber를 대상으로 하며, fiber의 재귀적 트리 구조를 가리킵니다.
자식 fiber(a child fiber)는 컴포넌트의 render 함수가 반환하는 값에 해당합니다.
```
function Parent(){
  return <Child />
}
```

위 예제에서 Parent의 자식 fiber는 Child에 해당됩니다.
Sibling field는 render 함수가 여러 개의 자식을 반환할 때 설명됩니다.
```
function Parent(){
  return [<Child1 />, <Child2 />] 
}
```

자식 fiber들은 head가 첫번째 자식을 가리키고 있는 싱글 LinkedList를 구성합니다.
위 예제에서, Parent의 자식은 Child1이고, Child2는 Child1의 Sibling이 됩니다.
child fiber는 tail-called function이라고 생각할 수 있습니다.


### 3) return
return fiber는 현재 항목을 수행한 후, 프로그램이 반환해야할 정보를 담고 있는 fiber입니다. 개념상으로 stack frame의 반환 주소와 같습니다. 
또한, 부모 fiber로 생각될 수 있습니다.

fiber가 다수의 자식 fiber들을 갖고 있다면, 각각의 자식 fiber의 return fiber는 그 부모가 됩니다.
```
function Parent(){
  return [<Child1 />, <Child2 />] 
}
```
이 예제에서 Child2는 Child1의 return fiber는 Parent가 됩니다.


### 4) pendingProps and memoizedProps
개념상으로 props는 함수의 인자입니다. Fiber의 pendingProps는 함수의 실행의 초기에 설정되고, memoizedProps는 실행 마지막에 설정됩니다.
들어오는 pendingProps가 memoizedProps와 같으면, 이걸 통해 fiber에게 이전 출력물이 재사용될 수 있음을 알리고, 불필요한 작업을 방지할 수 있습니다.


### 5) pendingWorkPriority
fiber의 우선순위를 나타내는 숫자입니다. ReactPriorityLevel 모듈은 다른 우선순위 수준과 각각의 의미를 나열합니다.

0을 갖는 NoWork의 경우를 제외하고, 높은 숫자는 낮은 우선순위를 갖습니다.
예를 들어 아래 함수를 사용하여 fiber의 우선순위가 최소한 주어진 레벨만큼 높은지를 확인할 수 있습니다.
```
function matchesPriority(fiber, priority) {
  return (
    fiber.pendingWorkPriority !== 0 && fiber.pendingWorkPriority <= priority
  );
}
```
스케줄러는 다음으로 수행할 작업 단위를 찾기 위해 우선순위(pendingWorkPriority) 필드를 사용합니다.


### 6) alternate
flush
- fiber를 flush하는 것은 그 결과를 화면에 나타는 것입니다.

work-in-progress
- 아직 완료되지 않은 fiber. 개념 상으로 아직 반환되지 않은 stack frame을 의미합니다.

언제든지 컴포넌트 인스턴스는 여기에 부합하는 최대 2개의 fiber를 가집니다.
- current fiber
- flushed fiber
- work-in-progress fiber
- current fiber의 대체재는 work-in-progress이며, work-in-progress의 대체제는 current fiber입니다.

fiber의 대체제는 cloneFiber라고 불리는 함수를 사용하여 지연 생성됩니다. 
항상 새로운 객체를 생성하는 대신, cloneFiber가 존재할 경우 기존 fiber의 대체재를 사용하여 할당을 최소화 시킵니다.


### 7) output
host component
- React 애플리케이션의 리프 노드. 렌더링 환경에 특정지어집니다. (브라우저 애플리케이션의 경우, div, span과 같은 항목들이며, JSX에서 소문자를 사용하여 표시됩니다.)

개념 상으로, fiber의 결과물은 함수의 반환값입니다.
모든 fiber는 결국 출력값을 갖지만 출력값은 host component를 통해 리프 노드에서만 생성됩니다. 출력값은 그런 뒤 트리의 위에 올라갑니다.
출력값은 rendering 환경에서 변경사항들을 flush할 수 있게 렌더러에 전달됩니다.
출력물이 어떻게 생성되고 업데이트될지 결정하는 것은 렌더러의 역할입니다.


