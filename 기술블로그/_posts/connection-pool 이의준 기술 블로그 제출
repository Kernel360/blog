---
layout: post  
title: "데이터베이스 커넥션의 원리와 핵심 개념"  
author: "이의준"  
categories: "기술블로그"  
banner:  
  background: "#2a9d8f"  
  height: "100vh"  
  min_height: "38vh"  
  heading_style: "font-size: 4.25em; font-weight: bold; text-decoration: underline"  
  tags: ["SPRINGBOOT", "DB", "CONNECTIONPOOL"]
---

# 스프링 기반 애플리케이션에서의 데이터베이스 커넥션 흐름: 이론과 실무

데이터베이스(DB)와의 통신은 스프링 프레임워크 기반 애플리케이션에서 성능과 안정성을 결정하는 핵심 요소입니다.  
본 글에서는 스프링이 DB와의 커넥션을 어떻게 설정하고 관리하는지, 그리고 최적화된 커넥션 풀링 기법과 트랜잭션 관리 전략을 심도 있게 분석하겠습니다.

---

## 1. 데이터베이스 커넥션의 원리와 핵심 개념

### 1.1 DataSource와 커넥션 풀의 중요성

- **DataSource:**  
  데이터베이스 연결을 생성하고 관리하는 객체로, 스프링에서는 `DataSource` 인터페이스를 통해 커넥션을 관리합니다. JNDI 기반, HikariCP 기반 등 다양한 구현체가 존재합니다.

- **커넥션 풀 (Connection Pool):**  
  애플리케이션의 성능을 최적화하기 위해 일정 개수의 데이터베이스 커넥션을 미리 생성하여 유지하는 메커니즘입니다. 커넥션 풀은 연결 생성 비용을 절감하고 동시성 문제를 완화하는 데 기여합니다.

스프링 부트에서는 기본적으로 HikariCP가 사용되며, 이는 높은 성능과 안정성을 갖춘 커넥션 풀 관리 도구입니다.

### 1.2 커넥션 풀의 동작 방식

커넥션 풀은 다음과 같은 방식으로 동작합니다:
1. **애플리케이션이 시작될 때** 미리 설정된 수만큼의 커넥션을 생성합니다.
2. **클라이언트가 데이터베이스 접근 요청을 할 때** 기존의 연결된 커넥션을 재사용합니다.
3. **작업이 끝나면** 해당 커넥션을 반환하여 재사용할 수 있도록 합니다.
4. **오랜 시간 동안 사용되지 않는 커넥션은 자동으로 정리**되며, 필요할 경우 새로운 커넥션을 생성하여 균형을 맞춥니다.

이러한 방식으로 커넥션 풀은 애플리케이션의 성능을 최적화하고 불필요한 데이터베이스 연결 비용을 절감하는 데 중요한 역할을 합니다.

### 1.3 커넥션 풀과 단일 연결의 차이점

| 비교 항목      | 단일 연결 | 커넥션 풀 |
|---------------|---------|---------|
| 커넥션 개수   | 1개만 존재 | 여러 개 유지 |
| 성능         | 낮음 | 높음 |
| 동시 처리량   | 낮음 | 높음 |
| 리소스 사용량 | 적음 | 많음 (그러나 최적화 가능) |
| 연결 재사용   | 불가능 | 가능 |
| 유지보수     | 쉬움 | 복잡함 |

위 표를 보면, 커넥션 풀을 사용하면 성능 향상이 가능하지만 설정과 유지보수가 필요하다는 점을 알 수 있습니다.

---

## 2. 스프링 부트에서의 DataSource 설정과 HikariCP 최적화

스프링 부트의 자동 설정 기능을 활용하면 간단한 설정만으로 커넥션 풀을 구성할 수 있습니다.

### 2.1 예제: `application.yml`을 통한 설정

```yaml
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: myuser
    password: mypassword
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      idle-timeout: 30000
      connection-timeout: 5000
      validation-timeout: 5000
      max-lifetime: 1800000
```

위 설정에서는 최대 30개의 커넥션을 유지하며, 비활성 커넥션의 최소 개수를 10개로 설정하고, 타임아웃 값을 명시적으로 지정하여 안정성을 높였습니다.

### 2.2 커넥션 풀 튜닝 전략

커넥션 풀의 성능을 최적화하기 위해 다음과 같은 요소를 고려해야 합니다.

- **최대 커넥션 수 (`maximum-pool-size`)**: 애플리케이션의 동시 요청 수를 분석하여 적절한 값을 설정합니다.
- **최소 유휴 커넥션 (`minimum-idle`)**: 시스템이 비활성 상태일 때도 일정 개수의 연결을 유지하여 성능을 향상시킵니다.
- **커넥션 유효성 검사 (`validation-timeout`)**: 비정상적인 커넥션을 감지하여 예기치 않은 오류를 방지합니다.

---

## 3. 스프링의 DB 커넥션 흐름 및 실행 과정

### 3.1 DB 커넥션 처리의 전체 흐름

1. **애플리케이션 초기화:**  
   `DataSource` 빈이 생성되며, HikariCP 커넥션 풀이 초기화됩니다.
2. **요청 수신 및 컨트롤러 호출:**  
   클라이언트의 HTTP 요청이 컨트롤러(Controller) 계층으로 전달됩니다.
3. **서비스 계층 비즈니스 로직 실행:**  
   컨트롤러에서 서비스(Service) 계층을 호출하여 데이터 처리 로직을 실행합니다.
4. **Repository 계층에서 DB 커넥션 획득:**  
   `DataSource`를 통해 커넥션 풀에서 사용 가능한 커넥션을 획득합니다.
5. **트랜잭션 시작 및 DB 쿼리 실행:**  
   트랜잭션이 활성화되며, 커넥션을 이용해 데이터베이스 작업이 수행됩니다.
6. **커넥션 반환 및 트랜잭션 종료:**  
   작업이 완료되면 커넥션은 커넥션 풀로 반환되며, 트랜잭션이 커밋 또는 롤백됩니다.

---

## 4. 트랜잭션 관리 전략과 커넥션 관리 기법

### 4.1 트랜잭션의 개념과 필요성

트랜잭션(Transaction)은 데이터베이스에서 여러 개의 작업을 하나의 논리적인 단위로 묶어 일관성을 유지하는 방법입니다. 

### 4.2 트랜잭션 모드 비교

| 모드 | 설명 |
|------|-----|
| Auto Commit | 각 SQL 실행 후 자동으로 커밋 |
| Manual Commit | 명시적으로 `commit()`을 호출해야 반영됨 |
| `@Transactional` | 스프링이 자동으로 트랜잭션을 관리 |

---

## 5. 결론

스프링 프레임워크에서 데이터베이스 커넥션 관리는 성능과 확장성을 고려해야 하는 중요한 요소입니다. 

**핵심 요점:**
- HikariCP를 효과적으로 활용하여 커넥션 풀 성능을 최적화해야 합니다.
- `@Transactional`을 통해 트랜잭션의 안정성을 확보할 수 있습니다.
- 커넥션 풀의 크기 조절 및 성능 튜닝이 중요합니다.

스프링의 강력한 데이터베이스 커넥션 관리 기능을 활용하여 안정적이고 효율적인 애플리케이션을 개발하시기 바랍니다.

