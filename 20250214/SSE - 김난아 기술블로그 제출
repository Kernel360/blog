---
layout: post
title: "SSE란?"
author: "김난아"
categories: "프론트엔드 기술블로그"
banner:
  image: ""
  background: "#000"
  height: "100vh"
  min_height: "38vh"
  heading_style: "font-size: 4.25em; font-weight: bold;"
  tags:
    ["SSE", "WebSocket", "Polling"]
---

### SSE
**SSE(Server-Sent Events)**는 서버에서 클라이언트로 단방향 실시간 데이터를 보내는 기술

비슷한 기술로는 WebSocket, Poling, Long Polling이 있다.
우리 프로젝트에는 알림기능을 주기위해 SSE를 도입하기로 했다!

처음에는 WebSocket에 관한 이야기도 나왔지만 단순히 차량점검에 대한 알림을 주기만 해도 된다는 결론이 나서 SSE만 사용하기로 했다. 
둘의 가장 큰 차이점은 **WebSocket은 양방향이고 SSE는 단방향이라는 것.**

단방향 통신은 서버 → 클라이언트로만 데이터가 흐르고,
HTTP 프로토콜 사용해 별도 프로토콜이 필요없어 구현이 간단하다는 점.
클라이언트에서 매번 요청없이 한번의 연결을 통해 서버와 통신해야하는 경우에 사용된다.

예시로, 실시간 알림, 실시간 주가 정보, 소셜 미디어 피드 업데이트, 진행 상황 모니터링같은 곳에 사용되고, 주의사항으로는 클라이언트에서 서버로의 데이터 전송이 필요한 경우는 부적합하고 동시 연결 수 제한이 있을 수 있다.


```ts
const eventSource = new EventSource('/api/events');

eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('새로운 데이터:', data);
};

eventSource.onerror = (error) => {
    console.error('SSE 에러:', error);
    eventSource.close();
};

// 연결 종료가 필요할 때
eventSource.close()
```

### 실시간 통신 주요 기술들
**1. WebSocket**
- 양방향 실시간 통신
- 별도의 프로토콜(ws://, wss://) 사용
- 채팅, 실시간 게임, 협업 도구에 적합

**2. Long Polling**

- 클라이언트가 주기적으로 서버에 요청 (클라이언트가 요청을 보내면 서버가 새 데이터가 있을 때까지 응답을 대기)
- 일반 HTTP 요청 사용
- 간단하지만 서버 부하가 큼

**3. Polling**
Polling은 클라이언트가 정해진 간격으로 서버에 데이터를 요청하는 방식 (새 데이터가 있든 없든 무조건 요청)

> **장점:**
구현이 매우 간단함
모든 브라우저에서 작동
기존 HTTP 인프라 사용


> **단점:**
서버 부하가 큼 (불필요한 요청 많음)
실시간성이 떨어짐
네트워크 트래픽 낭비

### Polling과 Long Polling 차이점
즉, Short Polling은 "3초마다 새 메일 왔나요?"라고 계속 물어보는 것이고,
Long Polling은 "새 메일 오면 알려주세요"라고 한 번 말하고 기다리는 것.
